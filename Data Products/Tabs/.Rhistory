Pbeta((0.5,0.6,0.7),2,1)
Pbeta(c(0.5,0.6,0.7),2,1)
pbeta(c(0.5,0.6)2,1)
pbeta(c(0.4, 0.5, 0.6), 2, 1)
pbeta(c(0.5,0.6,0.7),2,1)
barplot(height=c(0.15,0.15,0.15),names=c(1,2,3),space = 0.75,border = "black",col = "light blue")
# P(A∪B) = P(A) + P(B) − P(A∩B), therefore P(B) = P(A∩B) + P(A∪B) - P(A)
P_AuB_ <-0.17
P_A_ <- 0.12
P_AnB_ <- 0.06
P_B_ <- P_AuB_ + P_AnB_ - P_A_
qbeta(0.75,2,1)
pbeta(0.75,2,1)
dbeta(0.75,2,1)
dbeta(0.75,2,1)
dbeta(0.75,0,1)
pbeta(0.75,0,1)
qbeta(0.75,0,1)
qunif(0.75,0,1)
p<-1:4
type(p)
typeof(p)
p
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
fi <- temp["X",]
xi <- temp["Prob",]
product <- fi*xi
sum(product)
product
install.packages("swirl")
swirl()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
swirl()
install.packages("ggplot2")
library(ggplot2)
version(ggplot2)
library(kernlab)
installed.packages(ggplot2)
installed.packages("ggplot2")
install.packages("kernlab")
library(kernlab)
x,-data(spam)
x<-data(spam)
head(x)
head(spam)
x<-spam%type
x<-spam&type
x<-spam$type
summary(x)
head(x)
install.packages("caret")
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain]
testing<-spam[-inTrain]
dim(inTrain)
dim(training)
dim(testing)
training<-spam[inTrain]
dim(training)
training<-spam[inTrain,]
dim(training)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(testing)
library(ISLR)
install.packages(("ISLR"))
library(ISLR)
data(wages)
data(wage)
data(Wage)
head(Wage)
remove.packages("ISLR")
remove.packages(ISLR)
data(Wage)
pt(2.5,15,lower.tail=FALSE)
ppois(9,5,FALSE)
qnorm(0.95,1100,75)
qnorm(0.95,1100,75/sqrt(100))
library(ggplot2)
ggplot(data.frame(c(2,2)))
ggplot(data.frame(c(2,2))+aes(x=2))
ggplot(data.frame(c(2,2))+aes(x=2)+geom="line")
power.t.test(power=0.8,n=16,sd=100,type="one.sample".alt="one.sided")$delta
power.t.test(power=0.8,n=16,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.9,n=16,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=25,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=50,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=10,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=8,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=12,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=11,sd=100,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=11,sd=200,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.6,n=11,sd=200,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=5,sd=200,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=20,sd=200,type="one.sample",alt="one.sided")$delta
power.t.test(power=0.8,n=40,sd=200,type="one.sample",alt="one.sided")$delta
getwd()
setwd("../Desktop/Web/RStudio/")
getwd()
shiny::runApp('myApp')
runApp('myApp')
getwd()
ls
dir()
setwd("C:/Users/USER/Desktop/Web/RStudio/myApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
